"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const http = require("http");
const next = require("next");
const sockIO = require("socket.io");
const app = express();
const httpServer = http.createServer(app);
const io = sockIO(httpServer);
const porta = 3000;
// const porta = process.env.PORT || 3000;
const dev = process.env.NODE_ENV !== "production";
const nextAPP = next({ dev, dir: "./dist" });
const nextHandler = nextAPP.getRequestHandler();
io.on("connect", (client) => {
    // tslint:disable-next-line:no-console
    console.log("CONECTOU PATRÃƒO");
    // tslint:disable-next-line:no-console
    client.on("enviaMSG", (msg) => io.emit("recebeMSG", msg));
    client.on("disconnect", () => {
        // tslint:disable-next-line:no-console
        console.log("DISCONECTOU");
    });
});
nextAPP.prepare().then(() => {
    app.get("/", (req, res) => {
        nextAPP.render(req, res, "/index");
    });
    app.get("/mensagens", (req, res) => {
        nextAPP.render(req, res, "/mensagens");
    });
    app.get("*", (req, res) => {
        return nextHandler(req, res);
    });
    httpServer.listen(porta, (err) => {
        if (err) {
            // tslint:disable-next-line:no-console
            console.log(err);
            return;
        }
        // tslint:disable-next-line:no-console
        console.log(`SERVIDOR INICIOU NA PORTA: ${porta}`);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc2VydmVyL3NlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFtQztBQUNuQyw2QkFBNkI7QUFDN0IsNkJBQTZCO0FBQzdCLG9DQUFvQztBQUVwQyxNQUFNLEdBQUcsR0FBRyxPQUFPLEVBQUUsQ0FBQztBQUN0QixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFDLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUU5QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDbkIsMENBQTBDO0FBQzFDLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLFlBQVksQ0FBQztBQUVsRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7QUFDN0MsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUM7QUFFaEQsRUFBRSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRTtJQUMxQixzQ0FBc0M7SUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRS9CLHNDQUFzQztJQUN0QyxNQUFNLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUUxRCxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUU7UUFDM0Isc0NBQXNDO1FBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDN0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO0lBQzFCLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ3hCLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNyQyxDQUFDLENBQUMsQ0FBQztJQUVILEdBQUcsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ2pDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUN6QyxDQUFDLENBQUMsQ0FBQztJQUVILEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ3hCLE9BQU8sV0FBVyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMvQixDQUFDLENBQUMsQ0FBQztJQUVILFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDL0IsSUFBSSxHQUFHLEVBQUU7WUFDUCxzQ0FBc0M7WUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNqQixPQUFPO1NBQ1I7UUFDRCxzQ0FBc0M7UUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xyXG5pbXBvcnQgKiBhcyBodHRwIGZyb20gXCJodHRwXCI7XHJcbmltcG9ydCAqIGFzIG5leHQgZnJvbSBcIm5leHRcIjtcclxuaW1wb3J0ICogYXMgc29ja0lPIGZyb20gXCJzb2NrZXQuaW9cIjtcclxuXHJcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcclxuY29uc3QgaHR0cFNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKGFwcCk7XHJcbmNvbnN0IGlvID0gc29ja0lPKGh0dHBTZXJ2ZXIpO1xyXG5cclxuY29uc3QgcG9ydGEgPSAzMDAwO1xyXG4vLyBjb25zdCBwb3J0YSA9IHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMDtcclxuY29uc3QgZGV2ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiO1xyXG5cclxuY29uc3QgbmV4dEFQUCA9IG5leHQoeyBkZXYsIGRpcjogXCIuL2Rpc3RcIiB9KTtcclxuY29uc3QgbmV4dEhhbmRsZXIgPSBuZXh0QVBQLmdldFJlcXVlc3RIYW5kbGVyKCk7XHJcblxyXG5pby5vbihcImNvbm5lY3RcIiwgKGNsaWVudCkgPT4ge1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXHJcbiAgY29uc29sZS5sb2coXCJDT05FQ1RPVSBQQVRSw4NPXCIpO1xyXG5cclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxyXG4gIGNsaWVudC5vbihcImVudmlhTVNHXCIsIChtc2cpID0+IGlvLmVtaXQoXCJyZWNlYmVNU0dcIiwgbXNnKSk7XHJcblxyXG4gIGNsaWVudC5vbihcImRpc2Nvbm5lY3RcIiwgKCkgPT4ge1xyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcclxuICAgIGNvbnNvbGUubG9nKFwiRElTQ09ORUNUT1VcIik7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxubmV4dEFQUC5wcmVwYXJlKCkudGhlbigoKSA9PiB7XHJcbiAgYXBwLmdldChcIi9cIiwgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICBuZXh0QVBQLnJlbmRlcihyZXEsIHJlcywgXCIvaW5kZXhcIik7XHJcbiAgfSk7XHJcblxyXG4gIGFwcC5nZXQoXCIvbWVuc2FnZW5zXCIsIChyZXEsIHJlcykgPT4ge1xyXG4gICAgbmV4dEFQUC5yZW5kZXIocmVxLCByZXMsIFwiL21lbnNhZ2Vuc1wiKTtcclxuICB9KTtcclxuXHJcbiAgYXBwLmdldChcIipcIiwgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICByZXR1cm4gbmV4dEhhbmRsZXIocmVxLCByZXMpO1xyXG4gIH0pO1xyXG5cclxuICBodHRwU2VydmVyLmxpc3Rlbihwb3J0YSwgKGVycikgPT4ge1xyXG4gICAgaWYgKGVycikge1xyXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxyXG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxyXG4gICAgY29uc29sZS5sb2coYFNFUlZJRE9SIElOSUNJT1UgTkEgUE9SVEE6ICR7cG9ydGF9YCk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXX0=